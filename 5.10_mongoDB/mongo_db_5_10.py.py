# -*- coding: utf-8 -*-
"""Mongo-DB 5.10

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1I0y_lu9yoDPtQpXVqNJWnmgP5bblW_Hf

### Importação de bibliotecas
"""

! pip install dnspython

import pymongo 
import pandas as pd
import json
# Dados_Mongo | DadosMongoDB |

"""### Iniciando o banco"""

# Criação do banco
client = pymongo.MongoClient("mongodb+srv://Dados_mongo:linguagem@cluster0-0zbms.gcp.mongodb.net/test?retryWrites=true&w=majority")
db = client.ovni

# Verificando se o banco foi criado
print(client)

# Criação de Coleção
colecao = db.ovnis
colecao

# Inserindo coleção com o registro
df = pd.read_csv('df_OVNI_preparado.csv')
# Print do DataFrame
df

df.drop(['Unnamed: 0','Unnamed: 0.1'],axis=1, inplace=True)

# Transformação dos Arquivos STR em Json 
df1 = df.to_json(orient='records')
df1 = json.loads(df1)

# Transferencia dos dados no banco de dados MongoDB
df2 = colecao.insert_many(df1)
type(df1)

# Contar a quantidade de documentos (registros) da coleção de ovnis ordenando pelo tipo shape
colecao.count()

# contando as coleções ordenando pelo shape

x = list(colecao.find({}).sort('Shape'))

# Print Ordenado
x

# Verificar quantas ocorrências existem por estado.
x = colecao.aggregate([{'$group': {'_id': '$State', 'count': {'$sum': 1}}}])

# print coleção definindo por estado 
for i in x:
  print(i)

#Buscar todas as ocorrências da cidade Phoenix.
dataf = x
dataf = colecao.find({'City': 'Phoenix'})

for j in dataf[0:10]:
  print(j)

# Buscando pelo estado da california 

dataf = dataf.colecao.find({'State': 'CA'})
cidade = { "_id": 0 }


dataf= {'State': 'CA'}
''' projection é quando você precisar apenas de um elemento
    de matriz específico nos documentos selecionados.   '''
# Nesse caso selecionando o ID e removendo ele.
iid = {'_id': 0}

for e in colecao.find(dataf,iid)[0:10]:
  print(e)